#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

DEFAULT_CACHE="node_modules bower_components"
BPLOG_PREFIX="buildpack.nodejs"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
STDLIB_FILE=$(mktemp -t stdlib.XXXXX)

### Load dependencies

curl --silent --retry 5 --retry-max-time 15 'https://lang-common.s3.amazonaws.com/buildpack-stdlib/v7/stdlib.sh' > "$STDLIB_FILE"
source "$STDLIB_FILE"
source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

export PATH="$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/.heroku/yarn/bin":$PATH

LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "$LOG_FILE"

### Handle errors

handle_failure() {
  header "Build failed"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false
[ -f "$BUILD_DIR/yarn.lock" ] && YARN=true || YARN=false
[ -f "$BUILD_DIR/package-lock.json" ] && NPM_LOCK=true || NPM_LOCK=false

### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"
fail_missing_fusion_cli   "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment"

cd $BUILD_DIR
create_env # can't pipe the whole thing because piping causes subshells, preventing exports
list_node_config | output "$LOG_FILE"

### Configure package manager cache directories
[ ! "$YARN_CACHE_FOLDER" ] && export YARN_CACHE_FOLDER=$(mktemp -d -t yarncache.XXXXX)
[ ! "$NPM_CONFIG_CACHE" ] && export NPM_CONFIG_CACHE=$(mktemp -d -t npmcache.XXXXX)

build_fusion_app() {
  if [[ ! -d ".fusion/dist" ]]; then
    ./node_modules/.bin/fusion build --${NODE_ENV:-production}
  fi
}

update_tmp_paths_to_app_in_fusion_server_bundle() {
  sed -i "s;$(pwd);/app;g" .fusion/dist/production/server/server-main.js
}

create_default_procfile() {
  local startScript=$(read_json "$BUILD_DIR/package.json" ".scripts.start")

  if ! echo "$startScript" | grep -qe "fusion[[:space:]]\{1,\}start"; then
    echo "The start script in your package.json file does not include \"fusion start\"."
    echo "We are not sure how to handle your start script and will not continue."
    echo "You should make sure your start script or Procfile web process binds to \$PORT properly."
    return 0
  fi

  if ! [[ -f "Procfile" ]]; then
    touch Procfile
  fi

  if grep -q "^web:" Procfile; then
    echo "Procfile already contains a web process. We will not create one."
    echo "You should make sure your process binds to \$PORT properly."
    return 0
  fi

  if echo "$startScript" | grep -qe "--port"; then
    echo "web: $startScript" >> Procfile
  else
    echo "web: $startScript --port=\${PORT:-3000}" >> Procfile
  fi
}

header "Building fusion.js app"
build_fusion_app | output "$LOG_FILE"

header "Updating /tmp paths to /app in fusion.js server bundle"
update_tmp_paths_to_app_in_fusion_server_bundle | output "$LOG_FILE"

header "Ensuring proper web process exists in Procfile"
create_default_procfile

cache_build() {
  local cache_directories=$(get_cache_directories)

  echo "Clearing previous node cache"
  clear_cache
  if ! ${NODE_MODULES_CACHE:-true}; then
    echo "Skipping cache save (disabled by config)"
  elif [ "$cache_directories" == "" ]; then
    echo "Saving 2 cacheDirectories (default):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$DEFAULT_CACHE"
  else
    echo "Saving $(echo $cache_directories | wc -w | xargs) cacheDirectories (package.json):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
  fi
  save_signature
}

header "Caching build"
cache_build | output "$LOG_FILE"

summarize_build() {
  if $NODE_VERBOSE; then
    list_dependencies "$BUILD_DIR"
  fi

  mmeasure 'modules.size' "$(measure_size)"
}

header "Fusion.js build succeeded!"
mcount "compile.fusionjs"
summarize_build | output "$LOG_FILE"
